# TaskPlus Project Rules

## 基本ルール
- 常に日本語で応答する
- SwiftUIのベストプラクティスに従う
- コードの品質と可読性を重視する

## 開発者情報
- **開発者**: del mar y el sol
- **屋号**: del mar y el sol
- **プロジェクト**: TaskPlus - iOS Task Management App

## コード変更後の必須確認事項
- **コードを変更したら、必ずビルドが通るかどうかを確認する**
- ビルドエラーが発生した場合は、即座に修正する
- 修正後も再度ビルドテストを実行する
- ビルドが成功するまで修正を継続する

## ビルド確認手順
1. コード変更を完了したら、必ずビルドテストを実行
2. エラーが発生した場合は、エラーメッセージを分析
3. 修正を適用して再度ビルドテスト
4. ビルド成功を確認してから次の作業に進む

## GitHubリポジトリとバックアップ
- **リポジトリURL**: https://github.com/salus77/TaskPlus
- **メインブランチ**: main
- **コミットプレフィックス**: 機能追加時は `feat:` を使用
- **リポジトリ自動作成**: 存在しない場合はGitHub CLIで自動作成
- 重要な機能追加や修正が完了したら、GitHubにコミット・プッシュする
- 定期的にプロジェクトの状態をGitHubにバックアップする
- コミットメッセージは日本語で分かりやすく記述する
- プッシュ前に必ずビルドテストを実行して動作確認する
- プッシュエラー時は自動的にリポジトリ作成を試行する

## プロジェクト構造
- 既存のアーキテクチャを尊重する
- 新しい機能は適切なディレクトリに配置する
- ファイル名とクラス名は一貫性を保つ

## UI変更時の事前確認
- **UIに関する変更を行う場合は、必ずユーザーに事前に確認を取る**
- レイアウト、デザイン、ユーザーインターフェースの変更は慎重に行う
- 変更内容を明確に説明し、ユーザーの承認を得てから実装する
- 既存のUIパターンとの一貫性を保つ

## ファイル・プロジェクト操作時の事前確認
- **ファイルの削除やプロジェクトの作り直しを実施する場合は、必ずユーザーに事前に確認を取る**
- 重要なファイルやデータの削除は慎重に行う
- 変更内容と影響範囲を明確に説明し、ユーザーの承認を得てから実行する
- 可能な限りバックアップを取ってから操作を実行する

## エラーハンドリング
- ユーザーに分かりやすいエラーメッセージを提供する
- デバッグ用のログ出力を適切に配置する
- クラッシュを防ぐための安全な実装を行う

## Apple公式情報に基づく実装検討
- **新機能の実装時は、必ずApple公式ドキュメントを参照して最適な実装方法を検討する**
- Apple公式の推奨実装方法を優先的に採用する
- 公式ドキュメントの内容を理解し、適切なAPIやフレームワークを使用する
- 公式サンプルコードやベストプラクティスを参考にする

## 代替案の検討と実装
- **Apple公式の実装が困難または複雑な場合は、代替案を検討する**
- 代替案を複数提示し、それぞれのメリット・デメリットを説明する
- ユーザーと相談して最適な代替案を選択する
- 代替案でもApple公式のガイドラインに準拠するよう努める
- 実装の複雑さ、保守性、パフォーマンスを総合的に考慮する

## プロジェクト設定ファイルの変更
- **project.pbxprojやInfo.plistの手動変更は避け、Xcodeでの設定を優先する**
- 手動変更によるエラーのリスクを最小限に抑える
- 必要に応じてXcodeでの設定手順を説明する
- 手動変更が必要な場合は、必ずユーザーの許可を得てから実行する
- 変更前後での動作確認を徹底する

## GitHub自動化
- **リポジトリ自動作成**: GitHub CLIを使用してリポジトリが存在しない場合に自動作成
- **自動プッシュ**: コミット完了後は自動的にGitHubにプッシュを試行
- **エラーハンドリング**: プッシュエラー時は自動的にリポジトリ作成とリモート設定を実行
- **認証確認**: プッシュ前にGitHub CLIの認証状態を確認
- **リモート管理**: リモートリポジトリの設定を自動的に管理

---
description: TaskPlusプロジェクトの開発ルール
globs: ["**/*.swift", "**/*.swiftui"]
alwaysApply: true
